generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String       @id @default(cuid())
  email     String       @unique
  password  String? // Optional for OAuth users
  firstName String?
  lastName  String?
  avatar    String?
  role      UserRole     @default(ANALYST)
  provider  AuthProvider @default(LOCAL)

  // OAuth identifiers
  googleId   String? @unique
  facebookId String? @unique
  linkedinId String? @unique

  // Email verification
  isEmailVerified         Boolean   @default(false)
  emailVerificationToken  String?
  emailVerificationSentAt DateTime?

  // Password reset
  resetPasswordToken   String?
  resetPasswordExpires DateTime?

  // Security
  loginAttempts      Int       @default(0)
  lockedUntil        DateTime?
  lastPasswordChange DateTime?

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  lastActiveAt DateTime?

  mediaFiles              MediaFile[]
  organizationMemberships OrganizationMember[] @relation("UserOrganizationMemberships")

  sentInvitations OrganizationInvitation[] @relation("UserSentInvitations")

  aiContentGenerations     AiContentGeneration[]
  aiImageGenerations       AiImageGeneration[]
  messages                 Message[]
  notifications            NotificationEntity[]
  ContentTemplate          ContentTemplate[]
  Post                     Post[]
  approvalsRequested       PostApproval[]            @relation("ApprovalRequester")
  approvalsGiven           PostApproval[]            @relation("ApprovalApprover")
  auditLogs                AuditLog[]
  aiUsages                 AIUsage[]
  favoriteTemplates        UserFavoriteTemplate[]
  conversationParticipants ConversationParticipant[]

  socialAccountMemberships SocialAccountMember[] @relation("SocialAccountMemberships")
  invitedSocialMembers     SocialAccountMember[] @relation("SocialAccountInvitations")

  @@index([email, deletedAt])
  @@index([googleId, deletedAt])
  @@index([createdAt])
  @@index([lastActiveAt])
}

model SocialAccount {
  id                String    @id @default(cuid())
  organizationId    String
  platform          Platform
  platformAccountId String // Platform-specific account ID
  username          String?
  name              String?
  displayName       String?
  profileImage      String?
  accessToken       String
  refreshToken      String?
  accessSecret      String? // For Twitter OAuth 1.0a
  tokenExpiresAt    DateTime?
  errorMessage      String?
  isActive          Boolean   @default(true)
  lastSyncAt        DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  scopes       String[]
  lastPostedAt DateTime?
  metadata     Json?

  organization     Organization           @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  posts            Post[]
  rateLimitLogs    PlatformRateLimitLog[]
  EngagementMetric EngagementMetric[]
  members          SocialAccountMember[]

  accountType   SocialAccountType    @default(PAGE) // PAGE or PROFILE
  notifications NotificationEntity[]
  conversations Conversation[]
  pages         PageAccount[]

  @@unique([organizationId, platform, platformAccountId])
  @@index([platform, isActive])
  @@index([organizationId])
  @@index([accountType])
}

model PageAccount {
  id                  String  @id @default(cuid())
  socialAccountId     String
  platformPageId      String // Facebook Page ID
  name                String
  accessToken         String // Page access token (encrypted)
  category            String? // Page category
  instagramBusinessId String? // Linked Instagram account ID
  instagramUsername   String? // Linked Instagram username
  profilePicture      String? // Page/Instagram profile picture
  metadata            Json? // Additional page data

  // Relations
  socialAccount SocialAccount @relation(fields: [socialAccountId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // A page can have posts, metrics, etc.
  posts Post[]
  // EngagementMetric EngagementMetric[]
  // conversations    Conversation[]

  @@unique([platformPageId])
  @@index([socialAccountId])
  @@index([instagramBusinessId])
}

model Post {
  id              String     @id @default(cuid())
  authorId        String?
  socialAccountId String
  pageAccountId   String?
  content         String
  mediaFileIds    String[]
  scheduledAt     String?
  timezone        String
  publishedAt     DateTime?
  status          PostStatus @default(DRAFT)
  errorMessage    String?
  retryCount      Int        @default(0)
  metadata        Json?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  maxRetries Int @default(3)

  // Platform metadata
  platformPostId String? // ID returned by platform after publishing

  // RELATIONS
  author        User?           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  socialAccount SocialAccount   @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)
  pageAccount   PageAccount?    @relation(fields: [pageAccountId], references: [id], onDelete: Cascade)
  approvals     PostApproval[]
  analytics     PostAnalytics[]

  jobId       String?
  queueStatus ScheduleJobStatus @default(PENDING)

  // AI relations
  aiContentId        String?              @unique
  aiContent          AiContentGeneration? @relation(fields: [aiContentId], references: [id])
  aiImageGenerations AiImageGeneration[]

  metrics       EngagementMetric[]
  notifications NotificationEntity[]

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([socialAccountId, status, scheduledAt])
  @@index([organizationId, status])
  @@index([status, scheduledAt])
  @@index([socialAccountId, scheduledAt])
  @@index([jobId])
}

model PublishingMetric {
  id             String   @id @default(uuid())
  organizationId String
  platform       Platform
  success        Boolean
  errorMessage   String? // optional, only filled on failure
  timestamp      DateTime @default(now())

  // relations
  organization Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId, platform, timestamp])
}

model MediaFile {
  id                  String    @id @default(cuid())
  userId              String
  organizationId      String
  filename            String
  originalName        String
  mimeType            String
  size                Int
  url                 String
  publicId            String
  thumbnailUrl        String?
  duration            Int?
  metadata            Json?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  expiresAt           DateTime?
  isAIGenerated       Boolean   @default(false)
  aiGenerationContext Json?
  // Not unique to allow multiple files per generation:
  aiGenerationId      String?

  // Relation field (many media files -> one generation)
  aiImageGeneration AiImageGeneration? @relation(fields: [aiGenerationId], references: [id], onDelete: SetNull)

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([isAIGenerated])
  @@index([organizationId, isAIGenerated])
}

model Organization {
  id                 String                   @id @default(cuid())
  name               String
  email              String
  slug               String                   @unique
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  isActive           Boolean                  @default(true)
  planTier           PlanTier                 @default(FREE)
  planStatus         PlanStatus               @default(ACTIVE)
  subscriptionEndsAt DateTime?
  totalCreditsUsed   Int                      @default(0)
  members            OrganizationMember[]
  invitations        OrganizationInvitation[]
  socialAccounts     SocialAccount[]
  mediaFiles         MediaFile[]

  aiContentGenerations AiContentGeneration[]
  aiImageGenerations   AiImageGeneration[]
  conversations        Conversation[]
  notifications        NotificationEntity[]
  webhookEvents        WebhookEvent[]
  PostingSchedule      PostingSchedule[]
  ContentTemplate      ContentTemplate[]
  auditLogs            AuditLog[]

  aiUsages           AIUsage[]
  posts              Post[]
  subscription       Subscription?
  creditTransactions CreditTransaction[]

  brandKit         BrandKit[]
  EngagementMetric EngagementMetric[]

  // billing and limits
  monthlyCreditLimit Int?    @default(1000) // NULL = unlimited for enterprise
  maxMembers         Int     @default(5) // Based on your "up to 5 team members"
  billingEmail       String?
  timezone           String  @default("UTC")
  currency           String  @default("USD")

  trialEndsAt   DateTime?
  trialExtended Boolean   @default(false)
  settings      Json?

  publishingMetrics PublishingMetric[]

  @@index([planTier, planStatus])
  @@index([trialEndsAt])
}

model OrganizationMember {
  id             String   @id @default(cuid())
  organizationId String
  userId         String
  roleId         String
  invitedBy      String?
  joinedAt       DateTime @default(now())
  isActive       Boolean  @default(true) // Soft delete flag

  permissions  Json?
  lastActiveAt DateTime?

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation("UserOrganizationMemberships", fields: [userId], references: [id], onDelete: Cascade)
  role         Role         @relation(fields: [roleId], references: [id])

  @@unique([organizationId, userId])
  @@index([userId, isActive])
  @@index([lastActiveAt])
}

model OrganizationInvitation {
  id             String           @id @default(cuid())
  email          String
  organizationId String
  invitedBy      String?
  role           OrganizationRole @default(MEMBER)
  status         InvitationStatus @default(PENDING)
  token          String           @unique
  expiresAt      DateTime
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  resentAt       DateTime?

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  inviter      User?        @relation("UserSentInvitations", fields: [invitedBy], references: [id], onDelete: SetNull)

  message     String?
  permissions Json?

  @@unique([email, organizationId, status]) // Allow re-invite after expiration
  @@index([token])
  @@index([expiresAt]) // For cleanup jobs
  @@index([organizationId, createdAt]) // For org invitation history
  @@index([email, status])
}

model AiContentGeneration {
  id             String      @id @default(cuid())
  organizationId String
  userId         String
  platform       Platform
  contentType    ContentType
  topic          String
  tone           ToneType
  creditsUsed    Int

  prompt        String   @db.Text
  generatedText String   @db.Text
  hashtags      String[]

  cost      Float    @default(0)
  provider  String
  model     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Post relation (moved to Post as aiContentId)
  post Post?

  brandKitId String?
  brandKit   BrandKit? @relation(fields: [brandKitId], references: [id], onDelete: SetNull)

  @@index([organizationId, createdAt])
  @@index([userId])
}

model AiImageGeneration {
  id             String   @id @default(cuid())
  organizationId String
  userId         String
  prompt         String   @db.Text
  creditsUsed    Int
  imageUrl       String?
  publicId       String?
  revisedPrompt  String?  @db.Text
  cost           Float    @default(0)
  provider       String
  model          String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  mediaFiles MediaFile[]

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String?
  post   Post?   @relation(fields: [postId], references: [id])

  brandKitId String?
  brandKit   BrandKit? @relation(fields: [brandKitId], references: [id], onDelete: SetNull)

  @@index([organizationId, createdAt])
}

model AIUsage {
  id             String   @id @default(cuid())
  organizationId String
  userId         String
  type           String // 'content_generation' | 'image_generation'
  tokensUsed     Int
  cost           Float
  metadata       Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([organizationId, createdAt])
}

// Conversation = a thread of messages with a user on a platform
model Conversation {
  id                 String    @id @default(cuid())
  organizationId     String
  platform           Platform
  externalId         String
  subject            String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  lastMessageAt      DateTime?
  lastMessagePreview String?
  unreadCount        Int       @default(0)
  externalUserId     String
  externalUsername   String?
  tags               String[]
  // ADD: Social account context for permission checks
  socialAccountId    String?

  organization  Organization              @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  socialAccount SocialAccount?            @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)
  messages      Message[]
  // ADD: Track participants for efficient notification targeting
  participants  ConversationParticipant[]

  @@unique([organizationId, platform, externalId])
  @@index([socialAccountId]) // ADD
  @@index([lastMessageAt]) // ADD for sorting
  @@index([platform, organizationId]) // ADD
}

// NEW: Track conversation participants
model ConversationParticipant {
  id             String    @id @default(cuid())
  conversationId String
  userId         String
  joinedAt       DateTime  @default(now())
  lastReadAt     DateTime? // For read receipts

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@index([userId])
}

model Message {
  id             String        @id @default(cuid())
  conversationId String
  senderId       String?
  externalSender String?
  content        String?
  mediaUrl       String?
  status         MessageStatus @default(UNREAD)
  sentAt         DateTime
  createdAt      DateTime      @default(now())

  conversation  Conversation         @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender        User?                @relation(fields: [senderId], references: [id], onDelete: SetNull)
  notifications NotificationEntity[]

  // ADD indexes for efficient querying
  @@index([conversationId, sentAt]) // For loading conversation messages
  @@index([sentAt]) // For global search/sorting
}

model ContentTemplate {
  id             String  @id @default(cuid())
  organizationId String?
  userId         String
  name           String
  description    String?
  version        Int     @default(1) // For template versioning

  // Template metadata
  platform    Platform
  contentType ContentType
  category    TemplateCategory
  tags        String[]

  // Template content - enhanced structure
  content   Json // TemplateContent structure
  example   String? @db.Text // Example filled template
  variables Json? // Variable definitions for validation

  // Status & usage
  isPublic      Boolean        @default(false)
  status        TemplateStatus @default(DRAFT)
  usageCount    Int            @default(0)
  lastUsedAt    DateTime?
  favoriteCount Int            @default(0) // Track popularity

  // Brand integration
  brandKitId String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  brandKit     BrandKit?     @relation(fields: [brandKitId], references: [id], onDelete: SetNull)

  // Add template favorites for users
  favorites UserFavoriteTemplate[]

  @@index([organizationId, platform, contentType])
  @@index([isPublic, platform, category, status])
  @@index([userId, status])
  @@index([tags])
  @@index([brandKitId])
  @@index([favoriteCount]) // For popular templates
  @@index([usageCount]) // For most used templates
}

// Add favorite system
model UserFavoriteTemplate {
  id         String   @id @default(cuid())
  userId     String
  templateId String
  createdAt  DateTime @default(now())

  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  template ContentTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([userId, templateId])
  @@index([userId])
  @@index([templateId])
}

model PlatformRateLimitLog {
  id              String   @id @default(cuid())
  platform        Platform
  socialAccountId String
  requestType     String // e.g. "post", "dm", "comment"
  consumedAt      DateTime @default(now())
  windowStart     DateTime
  windowEnd       DateTime
  status          String // "allowed" | "blocked"

  socialAccount SocialAccount @relation(fields: [socialAccountId], references: [id])

  @@index([platform, socialAccountId, windowStart, windowEnd])
}

// ========================
// ANALYTICS & REPORTING
// ========================

model PostAnalytics {
  id          String   @id @default(cuid())
  postId      String
  platform    Platform
  likes       Int      @default(0)
  shares      Int      @default(0)
  comments    Int      @default(0)
  impressions Int      @default(0)
  clicks      Int      @default(0)
  reach       Int      @default(0)
  saves       Int      @default(0) // Instagram/LinkedIn saves
  videoViews  Int      @default(0)
  syncedAt    DateTime @default(now())
  createdAt   DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, platform, createdAt])
  @@index([postId, createdAt])
}

// ========================
// WEBHOOK & INTEGRATION
// ========================

model WebhookEvent {
  id                String             @id @default(cuid())
  organizationId    String
  platform          Platform
  eventType         WebhookEventType
  externalId        String? // Platform’s event ID
  platformAccountId String?
  payload           Json
  processed         Boolean            @default(false)
  processedAt       DateTime?
  errorMessage      String?
  retryCount        Int                @default(0)
  createdAt         DateTime           @default(now())
  deadLetter        DeadLetterWebhook?

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([platform, externalId])
  @@index([organizationId, processed, createdAt])
  @@index([platform, eventType, processed])
  @@index([platformAccountId])
}

model DeadLetterWebhook {
  id             String   @id @default(cuid())
  webhookEventId String   @unique
  reason         String
  payload        Json
  createdAt      DateTime @default(now())

  webhookEvent WebhookEvent @relation(fields: [webhookEventId], references: [id], onDelete: Cascade)
}

model EngagementMetric {
  id               String    @id @default(cuid())
  post             Post?     @relation(fields: [postId], references: [id])
  postId           String // The platform's post ID (e.g., Instagram post ID)
  platform         Platform
  type             String // 'like', 'comment', 'share', 'message'
  count            Int       @default(0)
  lastEngagementAt DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  socialAccountId String
  socialAccount   SocialAccount @relation(fields: [socialAccountId], references: [id])
  organizationId  String
  organization    Organization  @relation(fields: [organizationId], references: [id])

  @@unique([postId, platform, type])
  @@index([platform])
  @@index([type])
}

model PostingSchedule {
  id             String         @id @default(cuid())
  organizationId String
  platform       Platform
  timezone       String         @default("UTC")
  isActive       Boolean        @default(true)
  lastUpdated    DateTime       @default(now())
  source         ScheduleSource @default(AI_RECOMMENDATION)
  optimalTimes   Json // { monday: [9, 14, 18], tuesday: [10, 16], ... }
  excludedDates  String[] // ["2024-12-25", "2024-01-01"]
  maxPostsPerDay Int            @default(5)

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, platform])
  @@index([isActive, platform])
}

model PostApproval {
  id            String         @id @default(cuid())
  postId        String
  requesterId   String
  approverId    String?
  status        ApprovalStatus @default(PENDING)
  comments      String?
  requestedAt   DateTime       @default(now())
  reviewedAt    DateTime?
  revisionNotes String?        @db.Text

  post      Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  requester User  @relation("ApprovalRequester", fields: [requesterId], references: [id])
  approver  User? @relation("ApprovalApprover", fields: [approverId], references: [id])

  @@unique([postId])
  @@index([status, requestedAt])
  @@index([requesterId, status])
}

model NotificationEntity {
  id              String               @id @default(cuid())
  userId          String
  organizationId  String
  type            NotificationType
  socialAccountId String?
  title           String
  content         String
  data            Json? // Flexible data storage
  priority        NotificationPriority @default(NORMAL)
  read            Boolean              @default(false)
  readAt          DateTime?
  expiresAt       DateTime? // Auto-cleanup of old notifications
  createdAt       DateTime             @default(now())

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization  Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  message       Message?       @relation(fields: [messageId], references: [id], onDelete: SetNull)
  post          Post?          @relation(fields: [postId], references: [id], onDelete: SetNull)
  socialAccount SocialAccount? @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)

  // Optional references
  messageId String?
  postId    String?

  @@index([userId, read])
  @@index([createdAt])
  @@index([expiresAt])
}

enum NotificationType {
  MESSAGE_RECEIVED
  MENTION
  POST_APPROVAL
  SCHEDULE_REMINDER
  PERFORMANCE_ALERT
  SYSTEM_ALERT
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model AuditLog {
  id             String   @id @default(cuid())
  organizationId String
  userId         String // Who performed the action
  action         String // "member_invited", "member_removed", "plan_changed"
  resourceType   String // "organization", "member", "invitation"
  resourceId     String? // ID of the affected resource
  details        Json? // { oldRole: "MEMBER", newRole: "ADMIN" }
  ipAddress      String?
  userAgent      String?
  createdAt      DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([organizationId, createdAt])
  @@index([action, resourceType])
}

model BrandKit {
  id             String @id @default(cuid())
  organizationId String
  name           String @default("Our Brand")
  version        Int    @default(1) // For version tracking

  // Visual identity - flexible JSON structure
  logoUrl String?
  colors  Json? // { primary: "#1E40AF", secondary: "#F59E0B", ... }

  // Brand voice
  brandVoice String? @db.VarChar(500)
  tone       String? // Could use enum or free text
  guidelines Json? // Additional brand guidelines

  // Status
  isActive  Boolean  @default(true)
  isDefault Boolean  @default(false) // Mark as default brand kit
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organization         Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  aiContentGenerations AiContentGeneration[]
  aiImageGenerations   AiImageGeneration[]
  ContentTemplate      ContentTemplate[]

  @@index([organizationId])
  @@index([isActive])
}

enum BillingInterval {
  MONTHLY
  YEARLY
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  VOID
  UNCOLLECTIBLE
}

model Subscription {
  id                   String  @id @default(cuid())
  organizationId       String  @unique
  stripeSubscriptionId String? @unique
  stripeCustomerId     String? @unique

  // Plan details
  planTier        PlanTier
  billingInterval BillingInterval @default(MONTHLY)
  status          PlanStatus      @default(TRIALING)

  // Pricing
  unitAmount Int // in cents
  currency   String @default("usd")

  // Limits
  monthlyCreditLimit Int?
  maxMembers         Int

  // Billing dates
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAt           DateTime?
  canceledAt         DateTime?

  // Trial
  trialStart DateTime?
  trialEnd   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invoices     Invoice[]
  usageRecords UsageRecord[]

  @@index([status])
  @@index([currentPeriodEnd])
  @@index([trialEnd])
}

model Invoice {
  id              String        @id @default(cuid())
  subscriptionId  String
  stripeInvoiceId String?       @unique
  number          String? // Human-readable invoice number
  status          InvoiceStatus @default(DRAFT)

  // Amounts
  amountDue  Int // in cents
  amountPaid Int    @default(0)
  tax        Int    @default(0)
  currency   String @default("usd")

  // Dates
  invoiceDate DateTime?
  dueDate     DateTime?
  paidAt      DateTime?

  // PDF
  invoicePdfUrl String?

  // Line items (simplified - could be separate table for complex cases)
  lineItems Json // Array of { description, amount, quantity }

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([dueDate])
  @@index([subscriptionId, createdAt])
}

model UsageRecord {
  id             String   @id @default(cuid())
  subscriptionId String
  date           DateTime // Date of usage
  metric         String // "ai_tokens", "image_generations", "posts"
  quantity       Int // Amount used
  recordedAt     DateTime @default(now())

  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@unique([subscriptionId, date, metric])
  @@index([date, metric])
}

model CreditTransaction {
  id             String     @id @default(cuid())
  organizationId String
  type           CreditType // PURCHASE, USAGE, REFUND, BONUS
  amount         Int // Can be positive (purchase) or negative (usage)
  description    String
  referenceId    String? // Stripe payment intent ID or usage record ID
  balanceAfter   Int // Running balance after this transaction

  createdAt DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId, createdAt])
  @@index([type, createdAt])
}

enum SocialAccountRole {
  OWNER
  MANAGER
  CONTRIBUTOR
  ANALYST
}

model SocialAccountMember {
  id              String   @id @default(cuid())
  socialAccountId String
  userId          String
  invitedBy       String?
  roleId          String
  joinedAt        DateTime @default(now())
  isActive        Boolean  @default(true)

  // Relations
  socialAccount SocialAccount @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)
  role          Role          @relation(fields: [roleId], references: [id])
  user          User          @relation("SocialAccountMemberships", fields: [userId], references: [id], onDelete: Cascade)
  inviter       User?         @relation("SocialAccountInvitations", fields: [invitedBy], references: [id], onDelete: SetNull)

  @@unique([socialAccountId, userId])
  @@index([userId, isActive])
}

enum SocialAccountType {
  PAGE
  PROFILE
}

model Permission {
  id          String             @id @default(cuid())
  name        String             @unique // e.g., "posts:create", "analytics:read"
  description String?
  scope       PermissionScope
  resource    PermissionResource
  action      PermissionAction
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // Relations
  rolePermissions RolePermission[]

  @@unique([scope, resource, action])
  @@index([scope])
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isSystem    Boolean  @default(false) // System roles cannot be deleted
  isDefault   Boolean  @default(false) // Default role for new members
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  permissions          RolePermission[]
  organizationMembers  OrganizationMember[]
  socialAccountMembers SocialAccountMember[]

  @@index([isSystem, isDefault])
}

model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String

  // Relations
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
}

enum PostStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  SCHEDULED
  PUBLISHING
  PUBLISHED
  FAILED
  CANCELED
  RETRYING
}

enum QueueStatus {
  PENDING
  QUEUED
  PROCESSING
  COMPLETED
  FAILED
  RETRYING
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  CHANGES_REQUESTED
}

enum ScheduleSource {
  MANUAL
  AI_RECOMMENDATION
  PLATFORM_INSIGHTS
}

enum CreditType {
  PURCHASE
  USAGE
  REFUND
  BONUS
  ADJUSTMENT
}

enum PlanTier {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum PlanStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  TRIALING
}

enum OrganizationRole {
  OWNER // Full access, can delete org
  ADMIN // Manage members, billing, settings
  EDITOR // Create content, schedule posts
  ANALYST // View analytics only
  MEMBER // Basic access
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REVOKED
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  INVITE
  LOGIN
  EXECUTE
}

enum MessageStatus {
  UNREAD
  READ
  DELIVERED
  FAILED
}

enum Platform {
  X
  META
  LINKEDIN
  FACEBOOK
  INSTAGRAM
  AI
  API
  GENERAL
}

enum ScheduleJobStatus {
  PENDING
  PROCESSING
  SCHEDULED
  FAILED
  CANCELLED
  QUEUED
  PUBLISHED
  RETRYING
}

enum UserRole {
  OWNER
  EDITOR
  ANALYST
  VIEWER
  USER
}

enum AuthProvider {
  LOCAL
  GOOGLE
  FACEBOOK
  LINKEDIN
}

enum ContentType {
  POST
  STORY
  REEL
  CAROUSEL
  THREAD
}

enum ToneType {
  PROFESSIONAL
  CASUAL
  WITTY
  EXCITED
  INSPIRATIONAL
  EDUCATIONAL
}

enum AspectRatio {
  SQUARE    @map("1:1")
  LANDSCAPE @map("16:9")
  PORTRAIT  @map("4:5")
  VERTICAL  @map("9:16")
}

enum ReportType {
  ENGAGEMENT
  PERFORMANCE
  AUDIENCE
  COMPETITOR
  CUSTOM
}

enum ReportFormat {
  JSON
  PDF
  EXCEL
  CSV
}

enum ReportStatus {
  GENERATING
  COMPLETED
  FAILED
}

enum WebhookEventType {
  POST_PUBLISHED
  POST_DELETED
  COMMENT_RECEIVED
  MESSAGE_RECEIVED
  MENTION_RECEIVED
  FOLLOWER_GAINED
  FOLLOWER_LOST
  ENGAGEMENT
}

enum BrandColorType {
  PRIMARY
  SECONDARY
  ACCENT
  NEUTRAL
  SUCCESS
  WARNING
  ERROR
}

enum FontCategory {
  HEADING
  BODY
  ACCENT
}

enum BrandVoice {
  PROFESSIONAL
  CASUAL
  WITTY
  ENTHUSIASTIC
  AUTHORITATIVE
  FRIENDLY
  INSPIRATIONAL
}

enum EngagementType {
  LIKE
  COMMENT
  SHARE
  MENTION
  REACTION
}

enum GenerationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PermissionScope {
  ORGANIZATION // Organization-wide permissions
  SOCIAL_ACCOUNT // Social account-specific permissions
}

enum PermissionResource {
  // Organization resources
  ORGANIZATION
  MEMBERS
  BILLING
  SETTINGS

  // Social media resources
  POSTS
  CONTENT
  SCHEDULING
  ANALYTICS
  DMS

  // AI & Content resources
  AI_GENERATION
  MEDIA_FILES
  TEMPLATES
  BRAND_KIT

  // Team resources
  INVITATIONS
  AUDIT_LOGS
}

enum PermissionAction {
  CREATE
  READ
  UPDATE
  DELETE
  MANAGE
  APPROVE
  PUBLISH
}

enum TemplateCategory {
  PROMOTIONAL
  EDUCATIONAL
  ENGAGEMENT
  ANNOUNCEMENT
  EVENT
  PRODUCT
  TESTIMONIAL
  UGC
  HOLIDAY
  INDUSTRY_NEWS
}

enum TemplateStatus {
  DRAFT
  ACTIVE
  ARCHIVED
  DELETED
}
