generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String       @id @default(cuid())
  email                  String       @unique
  password               String? // Optional for OAuth users
  firstName              String?
  lastName               String?
  avatar                 String?
  role                   UserRole     @default(ANALYST)
  provider               AuthProvider @default(LOCAL)
  googleId               String?      @unique
  isEmailVerified        Boolean      @default(false)
  emailVerificationToken String?
  resetPasswordToken     String?
  resetPasswordExpires   DateTime?
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  lastActiveAt            DateTime?

  mediaFiles    MediaFile[]
  organizations OrganizationMember[] @relation("OrganizationMemberships")

  sentInvitations OrganizationInvitation[] @relation("SentInvitations")
  memberships  OrganizationMember[]     @relation("OrganizationInviter")

  aiContentGenerations AiContentGeneration[]
  aiImageGenerations   AiImageGeneration[]
  messages             Message[]
  notifications        Notification[]
  ContentTemplate      ContentTemplate[]
  Post                 Post[]
  approvalsRequested   PostApproval[]        @relation("ApprovalRequester")
  approvalsGiven       PostApproval[]        @relation("ApprovalApprover")
  auditLogs            AuditLog[]
  aiUsages             AIUsage[]
}

model SocialAccount {
  id                String    @id @default(cuid())
  organizationId    String
  platform          Platform
  platformAccountId String // Platform-specific account ID
  username          String?
  name              String?
  displayName       String?
  profileImage      String?
  accessToken       String
  refreshToken      String?
  accessSecret      String? // For Twitter OAuth 1.0a
  tokenExpiresAt    DateTime?
  isActive          Boolean   @default(true)
  lastSyncAt        DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  scopes       String[]
  lastPostedAt DateTime?

  organization     Organization           @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  posts            Post[]
  rateLimitLogs    PlatformRateLimitLog[]
  EngagementMetric EngagementMetric[]

  @@unique([organizationId, platform, platformAccountId])
  @@index([platform, isActive])
  @@index([organizationId])
}

model Post {
  id              String     @id @default(cuid())
  authorId        String
  socialAccountId String
  content         String
  mediaUrls       String[]
  scheduledAt     DateTime?
  publishedAt     DateTime?
  requesterId     String
  approverId      String?
  status          PostStatus @default(DRAFT)
  platformPostId  String?
  errorMessage    String?
  retryCount      Int        @default(0)
  metadata        Json?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  author        User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  socialAccount SocialAccount   @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)
  approvals     PostApproval[]
  analytics     PostAnalytics[]
  scheduleJob   ScheduleJob?

  jobId       String // Bull job ID
  queueStatus ScheduleJobStatus @default(PENDING)

  // Relations to AI generations (optional)
  aiContent          AiContentGeneration?
  aiImageGenerations AiImageGeneration[]

  metrics       EngagementMetric[]
  notifications Notification[]

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([socialAccountId, status, scheduledAt])
  @@index([status, scheduledAt])
}

model ScheduleJob {
  id     String @id @default(cuid())
  postId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model MediaFile {
  id                  String   @id @default(cuid())
  userId              String
  organizationId      String
  filename            String
  originalName        String
  mimeType            String
  size                Int
  url                 String
  publicId            String
  thumbnailUrl        String?
  duration            Int?
  metadata            Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  isAIGenerated       Boolean  @default(false)
  aiGenerationContext Json?
  // Not unique to allow multiple files per generation:
  aiGenerationId      String?

  // Relation field (many media files -> one generation)
  aiImageGeneration AiImageGeneration? @relation(fields: [aiGenerationId], references: [id], onDelete: SetNull)

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([isAIGenerated])
  @@index([organizationId, isAIGenerated])
}

model Organization {
  id                 String                   @id @default(cuid())
  name               String
  slug               String                   @unique
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  isActive           Boolean                  @default(true)
  planTier           PlanTier                 @default(FREE)
  planStatus         PlanStatus               @default(ACTIVE)
  subscriptionEndsAt DateTime?
  totalCreditsUsed   Int                      @default(0)
  members            OrganizationMember[]
  invitations        OrganizationInvitation[]
  socialAccounts     SocialAccount[]
  mediaFiles         MediaFile[]

  aiContentGenerations AiContentGeneration[]
  aiImageGenerations   AiImageGeneration[]
  conversations        Conversation[]
  notifications        Notification[]
  webhookEvents        WebhookEvent[]
  PostingSchedule      PostingSchedule[]
  ContentTemplate      ContentTemplate[]
  auditLogs            AuditLog[]

  aiUsages AIUsage[]
  posts    Post[]
   subscription     Subscription?
  invoices         Invoice[]
  creditTransactions CreditTransaction[]

  brandKit         BrandKit[]
  EngagementMetric EngagementMetric[]

  // billing and limits
  monthlyCreditLimit Int?    @default(1000) // NULL = unlimited for enterprise
  maxMembers         Int     @default(5) // Based on your "up to 5 team members"
  billingEmail       String?
  timezone           String  @default("UTC")
  currency           String  @default("USD")

  trialEndsAt   DateTime?
  trialExtended Boolean   @default(false)
  settings      Json?

  @@index([planTier, planStatus])
  @@index([trialEndsAt])
}

model OrganizationMember {
  id             String           @id @default(cuid())
  organizationId String
  userId         String
  role           OrganizationRole @default(MEMBER)
  invitedBy      String?
  joinedAt       DateTime         @default(now())
  isActive       Boolean          @default(true) // Soft delete flag

  permissions  Json?
  lastActiveAt DateTime?

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation("OrganizationMemberships", fields: [userId], references: [id], onDelete: Cascade)
  inviter      User?        @relation("OrganizationInviter", fields: [invitedBy], references: [id], onDelete: SetNull)

  @@unique([organizationId, userId])
  @@index([userId, isActive])
  @@index([organizationId, role])
  @@index([lastActiveAt])
}

model OrganizationInvitation {
  id             String           @id @default(cuid())
  email          String
  organizationId String
  invitedBy      String?
  role           OrganizationRole @default(MEMBER)
  status         InvitationStatus @default(PENDING)
  token          String           @unique
  expiresAt      DateTime
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  resentAt       DateTime?

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  inviter      User?        @relation("SentInvitations", fields: [invitedBy], references: [id], onDelete: SetNull)

  message        String?      
  permissions    Json?

 @@unique([email, organizationId, status]) // Allow re-invite after expiration
  @@index([token])
  @@index([expiresAt]) // For cleanup jobs
  @@index([organizationId, createdAt]) // For org invitation history
  @@index([email, status])
}

model AiContentGeneration {
  id             String      @id @default(cuid())
  organizationId String
  userId         String
  platform       Platform
  contentType    ContentType
  topic          String
  tone           ToneType
  creditsUsed    Int

  prompt        String   @db.Text
  generatedText String   @db.Text
  hashtags      String[]

  cost      Float    @default(0)
  provider  String
  model     String
  createdAt DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  post   Post?   @relation(fields: [postId], references: [id])
  postId String? @unique

  brandKitId String?
  brandKit   BrandKit? @relation(fields: [brandKitId], references: [id], onDelete: SetNull)

  @@index([organizationId, createdAt])
  @@index([userId])
}

model AiImageGeneration {
  id             String           @id @default(cuid())
  organizationId String
  userId         String
  prompt         String           @db.Text
  creditsUsed    Int
  status         GenerationStatus @default(PENDING)
  imageUrl       String?
  publicId       String?
  revisedPrompt  String?          @db.Text
  cost           Float            @default(0)
  provider       String
  model          String
  createdAt      DateTime         @default(now())

  // RELATIONS
  // Allow 0..N media files produced for this generation (safer than forcing 1:1)
  mediaFiles MediaFile[]

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  post   Post?   @relation(fields: [postId], references: [id])
  postId String? // remove @unique unless you want one generation per post

  brandKitId String?
  brandKit   BrandKit? @relation(fields: [brandKitId], references: [id], onDelete: SetNull)

  @@index([organizationId, createdAt])
}

model AIUsage {
  id             String   @id @default(cuid())
  organizationId String
  userId         String
  type           String // 'content_generation' | 'image_generation'
  tokensUsed     Int
  cost           Float
  metadata       Json?
  createdAt      DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([organizationId, createdAt])
}

// Conversation = a thread of messages with a user on a platform
model Conversation {
  id                 String            @id @default(cuid())
  organizationId     String
  platform           MessagingPlatform
  externalId         String // ID from platform (e.g., IG DM thread ID, FB convo ID)
  subject            String? // Optional: for LinkedIn/X future expansion
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  lastMessageAt      DateTime?
  lastMessagePreview String?
  unreadCount        Int               @default(0)
  externalUserId     String // ID of the user on the platform
  externalUsername   String? // Username of the user on the platform
  tags               String[] // e.g., ["vip", "support"]
  // Relations
  organization       Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  messages           Message[]

  @@unique([organizationId, platform, externalId])
}

model Message {
  id             String        @id @default(cuid())
  conversationId String
  senderId       String? // null if external user
  externalSender String? // username/id from platform
  content        String?
  mediaUrl       String? // optional image/video
  status         MessageStatus @default(UNREAD)
  sentAt         DateTime
  createdAt      DateTime      @default(now())

  // Relations
  conversation  Conversation   @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender        User?          @relation(fields: [senderId], references: [id], onDelete: SetNull)
  notifications Notification[]
}

enum TemplateCategory {
  PROMOTIONAL
  EDUCATIONAL
  ENGAGEMENT
  ANNOUNCEMENT
  EVENT
  PRODUCT
  TESTIMONIAL
  UGC
  HOLIDAY
  INDUSTRY_NEWS
}

enum TemplateStatus {
  DRAFT
  ACTIVE
  ARCHIVED
  DELETED
}

model ContentTemplate {
  id             String  @id @default(cuid())
  organizationId String?
  userId         String
  name           String
  description    String?

  // Template metadata
  platform    Platform
  contentType ContentType
  category    TemplateCategory
  tags        String[]

  // Template content
  content Json // TemplateContent structure
  example String? // Example filled template

  // Status & usage
  isPublic   Boolean        @default(false)
  status     TemplateStatus @default(DRAFT)
  usageCount Int            @default(0)
  lastUsedAt DateTime?

  // Brand integration
  brandKitId String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  brandKit     BrandKit?     @relation(fields: [brandKitId], references: [id], onDelete: SetNull)

  @@index([organizationId, platform, contentType])
  @@index([isPublic, platform, category, status])
  @@index([userId, status])
  @@index([tags])
  @@index([brandKitId])
  @@map("content_templates")
}

model PlatformRateLimitLog {
  id              String   @id @default(cuid())
  platform        Platform
  socialAccountId String
  requestType     String // e.g. "post", "dm", "comment"
  consumedAt      DateTime @default(now())
  windowStart     DateTime
  windowEnd       DateTime
  status          String // "allowed" | "blocked"

  socialAccount SocialAccount @relation(fields: [socialAccountId], references: [id])

  @@index([platform, socialAccountId, windowStart, windowEnd])
}

// ========================
// ANALYTICS & REPORTING
// ========================

model PostAnalytics {
  id          String   @id @default(cuid())
  postId      String
  platform    Platform
  likes       Int      @default(0)
  shares      Int      @default(0)
  comments    Int      @default(0)
  impressions Int      @default(0)
  clicks      Int      @default(0)
  reach       Int      @default(0)
  saves       Int      @default(0) // Instagram/LinkedIn saves
  videoViews  Int      @default(0)
  syncedAt    DateTime @default(now())
  createdAt   DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, platform, createdAt])
  @@index([postId, createdAt])
}

// ========================
// WEBHOOK & INTEGRATION
// ========================

model WebhookEvent {
  id                String             @id @default(cuid())
  organizationId    String
  platform          Platform
  eventType         WebhookEventType
  externalId        String? // Platform’s event ID
  platformAccountId String?
  payload           Json
  processed         Boolean            @default(false)
  processedAt       DateTime?
  errorMessage      String?
  retryCount        Int                @default(0)
  createdAt         DateTime           @default(now())
  deadLetter        DeadLetterWebhook?

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([platform, externalId])
  @@index([organizationId, processed, createdAt])
  @@index([platform, eventType, processed])
  @@index([platformAccountId])
}

model DeadLetterWebhook {
  id             String   @id @default(cuid())
  webhookEventId String   @unique
  reason         String
  payload        Json
  createdAt      DateTime @default(now())

  webhookEvent WebhookEvent @relation(fields: [webhookEventId], references: [id], onDelete: Cascade)
}

model EngagementMetric {
  id               String    @id @default(cuid())
  post             Post?     @relation(fields: [postId], references: [id])
  postId           String // The platform's post ID (e.g., Instagram post ID)
  platform         Platform
  type             String // 'like', 'comment', 'share', 'message'
  count            Int       @default(0)
  lastEngagementAt DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  socialAccountId String
  socialAccount   SocialAccount @relation(fields: [socialAccountId], references: [id])
  organizationId  String
  organization    Organization  @relation(fields: [organizationId], references: [id])

  @@unique([postId, platform, type])
  @@index([platform])
  @@index([type])
}

model PostingSchedule {
  id             String         @id @default(cuid())
  organizationId String
  platform       Platform
  timezone       String         @default("UTC")
  optimalTimes   Json // Array of {day: string, hours: number[]}
  isActive       Boolean        @default(true)
  lastUpdated    DateTime       @default(now())
  source         ScheduleSource @default(AI_RECOMMENDATION)

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, platform])
}

model PostApproval {
  id          String         @id @default(cuid())
  postId      String         @unique
  requesterId String
  approverId  String?
  status      ApprovalStatus @default(PENDING)
  comments    String?
  requestedAt DateTime       @default(now())
  reviewedAt  DateTime?

  post      Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  requester User  @relation("ApprovalRequester", fields: [requesterId], references: [id])
  approver  User? @relation("ApprovalApprover", fields: [approverId], references: [id])

  @@index([postId, status])
}

model Notification {
  id             String               @id @default(cuid())
  userId         String
  organizationId String
  type           NotificationType
  title          String
  content        String
  data           Json? // Flexible data storage
  priority       NotificationPriority @default(NORMAL)
  read           Boolean              @default(false)
  expiresAt      DateTime? // Auto-cleanup of old notifications
  createdAt      DateTime             @default(now())

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  message      Message?     @relation(fields: [messageId], references: [id], onDelete: SetNull)
  post         Post?        @relation(fields: [postId], references: [id], onDelete: SetNull)

  // Optional references
  messageId String?
  postId    String?

  @@index([userId, read])
  @@index([createdAt])
  @@index([expiresAt])
}

enum NotificationType {
  MESSAGE_RECEIVED
  MENTION
  POST_APPROVAL
  SCHEDULE_REMINDER
  PERFORMANCE_ALERT
  SYSTEM_ALERT
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model AuditLog {
  id             String   @id @default(cuid())
  organizationId String
  userId         String   // Who performed the action
  action         String   // "member_invited", "member_removed", "plan_changed"
  resourceType   String   // "organization", "member", "invitation"
  resourceId     String?  // ID of the affected resource
  details        Json?    // { oldRole: "MEMBER", newRole: "ADMIN" }
  ipAddress      String?
  userAgent      String?
  createdAt      DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([organizationId, createdAt])
  @@index([action, resourceType])
}

model BrandKit {
  id             String @id @default(cuid())
  organizationId String
  name           String @default("Our Brand")
  version        Int    @default(1) // For version tracking

  // Visual identity - flexible JSON structure
  logoUrl String?
  colors  Json? // { primary: "#1E40AF", secondary: "#F59E0B", ... }

  // Brand voice
  brandVoice String? @db.VarChar(500)
  tone       String? // Could use enum or free text
  guidelines Json? // Additional brand guidelines

  // Social identity
  socialHandles Json? // { twitter: "@company", instagram: "@company" }

  // Status
  isActive  Boolean   @default(true)
  isDefault Boolean   @default(false) // Mark as default brand kit
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  organization         Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  aiContentGenerations AiContentGeneration[]
  aiImageGenerations   AiImageGeneration[]
  ContentTemplate      ContentTemplate[]

  @@unique([organizationId, isActive], map: "one_active_brandkit_per_org")
  @@index([organizationId])
  @@index([isActive])
}


enum BillingInterval {
  MONTHLY
  YEARLY
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  VOID
  UNCOLLECTIBLE
}

model Subscription {
  id                 String           @id @default(cuid())
  organizationId     String           @unique
  stripeSubscriptionId String?         @unique
  stripeCustomerId   String?          @unique
  
  // Plan details
  planTier          PlanTier
  billingInterval   BillingInterval   @default(MONTHLY)
  status            PlanStatus        @default(TRIALING)
  
  // Pricing
  unitAmount        Int               // in cents
  currency          String            @default("usd")
  
  // Limits
  monthlyCreditLimit Int?
  maxMembers         Int
  
  // Billing dates
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAt           DateTime?
  canceledAt         DateTime?
  
  // Trial
  trialStart        DateTime?
  trialEnd          DateTime?
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  organization      Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invoices          Invoice[]
  usageRecords      UsageRecord[]

  @@index([status])
  @@index([currentPeriodEnd])
  @@index([trialEnd])
}

model Invoice {
  id                 String           @id @default(cuid())
  subscriptionId     String
  stripeInvoiceId    String?          @unique
  number             String?          // Human-readable invoice number
  status             InvoiceStatus    @default(DRAFT)
  
  // Amounts
  amountDue          Int              // in cents
  amountPaid         Int              @default(0)
  tax                Int              @default(0)
  currency           String           @default("usd")
  
  // Dates
  invoiceDate        DateTime?
  dueDate            DateTime?
  paidAt             DateTime?
  
  // PDF
  invoicePdfUrl      String?
  
  // Line items (simplified - could be separate table for complex cases)
  lineItems          Json             // Array of { description, amount, quantity }
  
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  organization       Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId     String
  subscription       Subscription     @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([dueDate])
  @@index([subscriptionId, createdAt])
}

model UsageRecord {
  id                 String           @id @default(cuid())
  subscriptionId     String
  date               DateTime         // Date of usage
  metric             String           // "ai_tokens", "image_generations", "posts"
  quantity           Int              // Amount used
  recordedAt         DateTime         @default(now())

  subscription       Subscription     @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@unique([subscriptionId, date, metric])
  @@index([date, metric])
}

model CreditTransaction {
  id                 String           @id @default(cuid())
  organizationId     String
  type               CreditType       // PURCHASE, USAGE, REFUND, BONUS
  amount             Int              // Can be positive (purchase) or negative (usage)
  description        String
  referenceId        String?          // Stripe payment intent ID or usage record ID
  balanceAfter       Int              // Running balance after this transaction
  
  createdAt          DateTime         @default(now())

  organization       Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId, createdAt])
  @@index([type, createdAt])
}

enum CreditType {
  PURCHASE
  USAGE
  REFUND
  BONUS
  ADJUSTMENT
}


enum PlanTier {
  FREE
  STARTER
  PROFESSIONAL  
  ENTERPRISE
}

enum PlanStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  TRIALING
}

enum OrganizationRole {
  OWNER       // Full access, can delete org
  ADMIN       // Manage members, billing, settings
  EDITOR      // Create content, schedule posts
  ANALYST     // View analytics only
  MEMBER      // Basic access
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REVOKED
}


enum AuditAction {
  CREATE
  UPDATE
  DELETE
  INVITE
  LOGIN
  EXECUTE
}

enum MessageStatus {
  UNREAD
  READ
  DELIVERED
  FAILED
}

enum Platform {
  X
  LINKEDIN
  FACEBOOK
  INSTAGRAM
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
  CANCELLED
}

enum ScheduleJobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum UserRole {
  OWNER
  EDITOR
  ANALYST
  VIEWER
  USER
}

enum AuthProvider {
  LOCAL
  GOOGLE
}


enum ContentType {
  POST
  STORY
  REEL
  CAROUSEL
  THREAD
}

enum ToneType {
  PROFESSIONAL
  CASUAL
  WITTY
  EXCITED
  INSPIRATIONAL
  EDUCATIONAL
}

enum AspectRatio {
  SQUARE    @map("1:1")
  LANDSCAPE @map("16:9")
  PORTRAIT  @map("4:5")
  VERTICAL  @map("9:16")
}

enum MessagingPlatform {
  INSTAGRAM
  FACEBOOK
  X
  LINKEDIN
}

enum ReportType {
  ENGAGEMENT
  PERFORMANCE
  AUDIENCE
  COMPETITOR
  CUSTOM
}

enum ReportFormat {
  JSON
  PDF
  EXCEL
  CSV
}

enum ReportStatus {
  GENERATING
  COMPLETED
  FAILED
}

enum WebhookEventType {
  POST_PUBLISHED
  POST_DELETED
  COMMENT_RECEIVED
  MESSAGE_RECEIVED
  MENTION_RECEIVED
  FOLLOWER_GAINED
  FOLLOWER_LOST
  ENGAGEMENT
}

enum ScheduleSource {
  AI_RECOMMENDATION
  MANUAL
  ANALYTICS_BASED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum BrandColorType {
  PRIMARY
  SECONDARY
  ACCENT
  NEUTRAL
  SUCCESS
  WARNING
  ERROR
}

enum FontCategory {
  HEADING
  BODY
  ACCENT
}

enum BrandVoice {
  PROFESSIONAL
  CASUAL
  WITTY
  ENTHUSIASTIC
  AUTHORITATIVE
  FRIENDLY
  INSPIRATIONAL
}

enum EngagementType {
  LIKE
  COMMENT
  SHARE
  MENTION
  REACTION
}

enum GenerationStatus {
  PENDING
  APPROVED
  REJECTED
}


