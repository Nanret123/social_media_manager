generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String         @id @default(cuid())
  email                  String         @unique
  password               String? // Optional for OAuth users
  firstName              String?
  lastName               String?
  avatar                 String?
  role                   UserRole       @default(ANALYST)
  provider               AuthProvider   @default(LOCAL)
  googleId               String?        @unique
  isEmailVerified        Boolean        @default(false)
  emailVerificationToken String?
  resetPasswordToken     String?
  resetPasswordExpires   DateTime?
  refreshTokens          RefreshToken[]
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt

  socialAccounts SocialAccount[]
   mediaFiles     MediaFile[] 
  posts          Post[]
  //organizations  OrganizationMember[]
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model SocialAccount {
  id            String    @id @default(cuid())
  userId        String
  platform      Platform
  accountId     String    // Platform-specific account ID
  username      String?
  displayName   String?
  profileImage  String?
  accessToken   String
  refreshToken  String?
  accessSecret  String?   // For Twitter OAuth 1.0a
  expiresAt     DateTime?
  isActive      Boolean   @default(true)
  lastSyncAt    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts Post[]

  @@unique([userId, platform, accountId])
}

model Post {
  id              String     @id @default(cuid())
  userId          String
  socialAccountId String
  content         String
  mediaUrls       String[]   // JSON array of media URLs
  scheduledAt     DateTime?
  publishedAt     DateTime?
  status          PostStatus @default(DRAFT)
  platformPostId  String?    // ID returned from social platform
  errorMessage    String?    // Error details if publishing fails
  retryCount      Int        @default(0)
  metadata        Json?      // Platform-specific metadata
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialAccount SocialAccount @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)

   media         PostMedia[]
}

model ScheduleJob {
  id        String           @id @default(cuid())
  postId    String           @unique
  jobId     String           // Bull job ID
  status    ScheduleJobStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model MediaFile {
  id          String    @id @default(cuid())
  userId      String
  filename    String
  originalName String
  mimeType    String
  size        Int
  url         String    // S3 or Cloudinary URL
  publicId String
  thumbnailUrl String?  // For videos
  duration    Int?      // For videos in seconds
  processed   Boolean   @default(false)
  metadata    Json?     // Platform-specific processing info
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  postMedias PostMedia[]
}

model PostMedia {
  id        String @id @default(cuid())
  postId    String
  mediaId   String
  order     Int    @default(0)
  createdAt DateTime @default(now())

  post  Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  media MediaFile @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@unique([postId, mediaId])
  @@map("post_media")
}


enum Platform {
  TWITTER
  LINKEDIN
  FACEBOOK
  INSTAGRAM
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
  CANCELLED
}

enum ScheduleJobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum UserRole {
  OWNER
  EDITOR
  ANALYST
  VIEWER
  USER
}

enum AuthProvider {
  LOCAL
  GOOGLE
}
