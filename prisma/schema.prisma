generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(uuid())
  email           String         @unique
  password        String?
  firstName       String?
  lastName        String?
  name            String?

  // OAuth
  provider        String?        // e.g., "google", "facebook"
  providerId      String?

  // Account Management
  isActive        Boolean        @default(true)
  emailVerified   Boolean        @default(false)
  accountStatus   AccountStatus  @default(ACTIVE)
  lastLogin       DateTime?

  // Relations
  profile         UserProfile?
  // pages           Page[]         @relation("UserPages")
  // managedPages    PageManager[]
  // socialTokens    SocialToken[]
  refreshTokens   RefreshToken[]
  emailTokens     EmailVerificationToken[]
  passwordResets  PasswordResetToken[]
  // socialAccounts  SocialMediaAccount[]

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model UserProfile {
  id                  String            @id @default(uuid())
  userId              String            @unique
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  avatar              String?
  bio                 String?
  timezone            String            @default("UTC")
  locale              String            @default("en")

  // Subscription
  subscriptionTier    SubscriptionTier  @default(FREE)
  subscriptionEndsAt  DateTime?

  // Preferences
  notifications       Json              @default("{}")

  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

// Refresh tokens for JWT auth
model RefreshToken {
  id          String   @id @default(uuid())
  token       String   @unique
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  deviceInfo  String?
  ipAddress   String?
  userAgent   String?
  expiresAt   DateTime
  isRevoked   Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@map("refresh_tokens")
}

// Email verification tokens
model EmailVerificationToken {
  id         String   @id @default(uuid())
  token      String   @unique
  email      String
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt  DateTime
  used       Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@map("email_verification_tokens")
}

// Password reset tokens
model PasswordResetToken {
  id         String   @id @default(cuid())
  token      String   @unique
  email      String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt  DateTime
  used       Boolean  @default(false)
  createdAt  DateTime @default(now())
}

// Enums
enum AccountStatus {
  ACTIVE
  SUSPENDED
  PENDING_VERIFICATION
  DEACTIVATED
}

enum SubscriptionTier {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

enum SocialPlatform {
  FACEBOOK
  INSTAGRAM
  TWITTER
  LINKEDIN
  TIKTOK
}

enum AccountType {
  PERSONAL
  BUSINESS
  PAGE
}
