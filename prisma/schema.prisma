generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid())
  email     String  @unique
  password  String?
  firstName String
  lastName  String

  // OAuth
  googleId String?      @unique
  avatar   String?
  provider AuthProvider @default(LOCAL)

  // Account Management
  isActive      Boolean       @default(true)
  emailVerified Boolean       @default(false)
  accountStatus AccountStatus @default(ACTIVE)

  // Relations
  profile        UserProfile?
  refreshTokens  RefreshToken[]
  emailTokens    EmailVerificationToken[]
  passwordResets PasswordResetToken[]
  sentInvitations     ManagerInvitation[] @relation("InvitationSender")
  receivedInvitations ManagerInvitation[] @relation("InvitationReceiver")
  managedAccounts     AccountManager[]    @relation("Manager")
  ownedAccountManagers AccountManager[]   @relation("Owner")
  SocialMediaAccount SocialMediaAccount[]
  Post               Post[]
  PostSchedule       PostSchedule[]
  Message            Message[]
  ContentTemplate    ContentTemplate[]
  PostingRecommendation PostingRecommendation[]
  Campaign           Campaign[]
  Thread             Thread[]
  Approval           Approval[] @relation("approver")
  AnalyticsReport    AnalyticsReport[]
  AIInsight          AIInsight[]
  MediaAsset         MediaAsset[]
  auditLogs           AuditLog[]

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model UserProfile {
  id                 String           @id @default(uuid())
  userId             String           @unique
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  avatar             String?
  bio                String?
  // Subscription
  subscriptionTier   SubscriptionTier @default(FREE)
  subscriptionEndsAt DateTime?

  // Preferences
  notifications Json @default("{}") // Expected structure: { email: boolean, push: boolean, ... }

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([subscriptionTier, subscriptionEndsAt])
}

model RefreshToken {
  id         String   @id @default(uuid())
  token      String   @unique
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  deviceInfo String?
  ipAddress  String?
  userAgent  String?
  expiresAt  DateTime
  isRevoked  Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model EmailVerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  email     String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("email_verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  email     String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model ManagerInvitation {
  id          String            @id @default(uuid())
  inviterId    String
  inviter     User              @relation("InvitationSender", fields: [inviterId], references: [id], onDelete: Cascade)
  inviteeEmail String
  inviteeId    String?
  invitee      User?            @relation("InvitationReceiver", fields: [inviteeId], references: [id], onDelete: Cascade)
  socialAccountIds String[] @default([]) // Supports multi-account invites
  permissions ManagerPermission[] @default([])
  status      InvitationStatus @default(PENDING)
  token       String           @unique
  expiresAt   DateTime
  acceptedAt  DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([inviteeEmail])
  @@index([token])
  @@index([status, expiresAt])
}

model AccountManager {
  id              String        @id @default(uuid())
  ownerId         String
  owner           User          @relation("Owner", fields: [ownerId], references: [id], onDelete: Cascade)
  managerId       String
  manager         User          @relation("Manager", fields: [managerId], references: [id], onDelete: Cascade)
  socialAccountId String
  socialAccount   SocialMediaAccount @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)
  permissions     ManagerPermission[] @default([])
  isActive        Boolean       @default(true)
  assignedAt      DateTime      @default(now())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([managerId, socialAccountId])
  @@index([ownerId])
  @@index([managerId])
  @@index([socialAccountId])
  @@index([isActive])
}

model SocialMediaAccount {
  id                 String             @id @default(uuid())
  ownerId            String
  owner              User               @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  // Platform info
  platform           SocialPlatform
  platformId         String
  username           String?
  displayName        String?
  profileUrl         String?

  // OAuth tokens (encrypted in service layer)
  accessToken        String
  refreshToken       String?
  tokenExpiresAt     DateTime?
  lastRefreshAttempt DateTime?          // Tracks last token refresh attempt
  apiTier            String?            // e.g., "Basic", "Pro" for X API

  // Platform-specific data
  platformData       Json               @default("{}")

  // Platform permissions
  platformPermissions String[]          @default([])
  capabilities        String[]          @default([])

  // Account type and status
  accountType         AccountType       @default(PERSONAL)
  connectionStatus    ConnectionStatus  @default(ACTIVE)

  // Health monitoring
  lastSuccessfulSync  DateTime?
  lastFailedSync      DateTime?
  failureCount        Int               @default(0)
  errorMessage        String?
  lastRateLimitError String?            // Logs rate limit errors

  // Rate limiting info
  rateLimitRemaining  Int?
  rateLimitResetTime  DateTime?

  // Team management
  managerCount        Int               @default(0) // Track number of managers (max 5)

  // Metadata
  isActive           Boolean           @default(true)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  // Relations
  posts              Post[]
  postSchedules      PostSchedule[]
  managers           AccountManager[]
  messages           Message[]
  engagements        Engagement[]
  postingRecommendations PostingRecommendation[]
  campaigns          Campaign[]
  aiInsights         AIInsight[]
  threads            Thread[]

  @@unique([ownerId, platform, platformId])
  @@index([connectionStatus])
  @@index([ownerId, platform])
}

model Post {
  id              String             @id @default(uuid())
  userId          String
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialAccountId String
  socialAccount   SocialMediaAccount @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)
  threadId        String?
  thread          Thread?            @relation("ThreadPosts", fields: [threadId], references: [id], onDelete: SetNull)
  campaignId      String?
  campaign        Campaign?          @relation("CampaignPosts", fields: [campaignId], references: [id], onDelete: SetNull)

  // Content
  content         String
  captions        String?            // AI-generated captions
  hashtags        String[]           @default([]) // AI-generated hashtags
  mediaUrls       String[]           @default([])
  mediaTypes      String[]           @default([])
  isAIGenerated   Boolean            @default(false)
  platformMediaId String?            // Platform-specific media ID after upload
  uploadStatus    UploadStatus?      // Tracks media upload status

  // Post status
  status          PostStatus         @default(DRAFT)
  publishedAt     DateTime?
  scheduledFor    DateTime?

  // Platform response
  platformPostId  String?
  platformData    Json               @default("{}")
  errorMessage    String?

  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  // Relations
  engagements     Engagement[]
  approvals       Approval[]
  mediaAssets     MediaAsset[]       @relation("PostMedia")

  @@index([userId])
  @@index([socialAccountId])
  @@index([threadId])
  @@index([campaignId])
  @@index([status])
  @@index([scheduledFor])
}

model PostSchedule {
  id              String             @id @default(uuid())
  userId          String
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialAccountId String
  socialAccount   SocialMediaAccount @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)
  content         String
  mediaAssets     MediaAsset[]       @relation("PostScheduleMedia")
  scheduledFor    DateTime
  timezone        String             @default("UTC")
  status          ScheduleStatus     @default(PENDING)
  processedAt     DateTime?
  errorMessage    Json?              // Structured: { code: String, message: String }
  retryCount      Int                @default(0)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@index([scheduledFor])
  @@index([status])
}

model Message {
  id              String         @id @default(uuid())
  socialAccountId String
  socialAccount   SocialMediaAccount @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)
  userId          String
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  content         String
  threadId        String?
  senderId        String?
  receiverId      String?
  platform        SocialPlatform
  status          MessageStatus  @default(UNREAD)
  sentAt          DateTime
  readAt          DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([socialAccountId])
  @@index([threadId])
  @@index([platform])
  @@index([status])
  @@index([sentAt])
  // Note: Currently focused on FB/IG DMs, expandable to X/LinkedIn
}

model ContentTemplate {
  id              String         @id @default(uuid())
  userId          String
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  name            String
  content         String
  mediaUrls       String[]       @default([]) // TODO: Consider MediaAsset relation
  mediaTypes      String[]       @default([])
  platform        SocialPlatform?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([userId])
  @@index([platform])
}

model Engagement {
  id              String             @id @default(uuid())
  postId          String
  post            Post               @relation(fields: [postId], references: [id], onDelete: Cascade)
  socialAccountId String
  socialAccount   SocialMediaAccount @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)
  likes           Int                @default(0)
  shares          Int                @default(0)
  comments        Int                @default(0)
  clicks          Int                @default(0)
  impressions     Int                @default(0)
  platform        SocialPlatform
  aiInsightId     String?            // Link to AIInsight for recommendations
  aiInsight       AIInsight?         @relation(fields: [aiInsightId], references: [id], onDelete: SetNull)
  recordedAt      DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@index([postId])
  @@index([socialAccountId])
  @@index([platform])
  @@index([recordedAt])
}

model PostingRecommendation {
  id              String             @id @default(uuid())
  userId          String
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialAccountId String?
  socialAccount   SocialMediaAccount? @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)
  recommendedTime DateTime?
  contentSuggestion String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@index([userId])
  @@index([socialAccountId])
}

model Campaign {
  id              String             @id @default(uuid())
  userId          String
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialAccountId String?
  socialAccount   SocialMediaAccount? @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)
  name            String
  description     String?
  posts           Post[]             @relation("CampaignPosts")
  startDate       DateTime?
  endDate         DateTime?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  aiInsights      AIInsight[]

  @@index([userId])
  @@index([socialAccountId])
  @@index([startDate, endDate])
}


model Thread {
  id              String             @id @default(uuid())
  socialAccountId String
  socialAccount   SocialMediaAccount @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)
  userId          String
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts           Post[]             @relation("ThreadPosts")
  title           String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@index([socialAccountId])
  @@index([userId])
}

model Approval {
  id              String         @id @default(uuid())
  postId          String
  post            Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  approverId      String
  approver        User           @relation("approver", fields: [approverId], references: [id], onDelete: Cascade)
  status          ApprovalStatus @default(PENDING)
  comments        String?
  approvedAt      DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([postId])
  @@index([approverId])
}

model AnalyticsReport {
  id              String         @id @default(uuid())
  userId          String
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  engagementIds   String[]
  format          ReportFormat   @default(PDF)
  title           String
  generatedAt     DateTime       @default(now())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([userId])
}

model AIInsight {
  id              String             @id @default(uuid())
  userId          String
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialAccountId String?
  socialAccount   SocialMediaAccount? @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)
  campaignId      String?
  campaign        Campaign?          @relation(fields: [campaignId], references: [id], onDelete: SetNull)
  content         String
  platform        SocialPlatform?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  engagements     Engagement[]

  @@index([userId])
  @@index([socialAccountId])
  @@index([campaignId])
}

model MediaAsset {
  id              String         @id @default(uuid())
  userId          String
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  url             String         // S3 URL (e.g., https://s3.amazonaws.com/bucket/key)
  mediaType       MediaType
  isAIGenerated   Boolean        @default(false)
  metadata        Json           @default("{}") // S3 details: { bucket: String, key: String, ... }
  platform        SocialPlatform?
  fileName        String?        // Original file name (e.g., my-image.jpg)
  fileSize        Int?           // Size in bytes
  mimeType        String?        // e.g., image/jpeg, video/mp4
  uploadStatus    UploadStatus   @default(PENDING)
  uploadedAt      DateTime?      // When uploaded to S3
  deletedAt       DateTime?      // Soft delete
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  posts           Post[]         @relation("PostMedia")
  postSchedules   PostSchedule[] @relation("PostScheduleMedia")

  @@index([userId])
  @@index([platform])
  @@index([uploadStatus])
  @@index([mediaType])
}

model AuditLog {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  action     String   // e.g., "POST_CREATED", "TOKEN_ACCESSED"
  entityType String?
  details    Json     @default("{}")
  createdAt  DateTime @default(now())

  @@index([userId])
}

// Enums
enum AccountStatus {
  ACTIVE
  SUSPENDED
  PENDING_VERIFICATION
  DEACTIVATED
}

enum SubscriptionTier {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

enum SocialPlatform {
  FACEBOOK
  INSTAGRAM
  X
  LINKEDIN
}

enum AccountType {
  PERSONAL
  BUSINESS
  PAGE
  CREATOR
}

enum AuthProvider {
  LOCAL
  GOOGLE
}

enum ConnectionStatus {
  ACTIVE
  EXPIRED
  REVOKED
  ERROR
  RECONNECT_REQUIRED
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
  DELETED
}

enum ScheduleStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum ManagerPermission {
  CREATE_POSTS
  EDIT_POSTS
  DELETE_POSTS
  PUBLISH_POSTS
  SCHEDULE_POSTS
  UPLOAD_MEDIA
  MANAGE_CONTENT_LIBRARY
  RESPOND_TO_COMMENTS
  RESPOND_TO_MESSAGES
  MODERATE_COMMENTS
  VIEW_ANALYTICS
  EXPORT_REPORTS
  VIEW_ACCOUNT_SETTINGS
  MANAGE_ACCOUNT_SETTINGS
  INVITE_OTHER_MANAGERS
  MANAGE_MANAGER_PERMISSIONS
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
  CANCELLED
}

enum MessageStatus {
  UNREAD
  READ
  REPLIED
  ARCHIVED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ReportFormat {
  PDF
  EXCEL
}

enum MediaType {
  IMAGE
  VIDEO
  REEL
  CAROUSEL
  STORY
}

enum UploadStatus {
  PENDING
  UPLOADING
  UPLOADED
  FAILED
  DELETED
}
