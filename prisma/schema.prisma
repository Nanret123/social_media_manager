generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String       @id @default(cuid())
  email                  String       @unique
  password               String? // Optional for OAuth users
  firstName              String?
  lastName               String?
  avatar                 String?
  role                   UserRole     @default(ANALYST)
  provider               AuthProvider @default(LOCAL)
  googleId               String?      @unique
  isEmailVerified        Boolean      @default(false)
  emailVerificationToken String?
  resetPasswordToken     String?
  resetPasswordExpires   DateTime?
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt

  mediaFiles    MediaFile[]
  organizations OrganizationMember[] @relation("OrganizationMemberships")

  sentInvitations OrganizationInvitation[] @relation("SentInvitations")
  invitedMembers  OrganizationMember[]     @relation("OrganizationInviter")

  aiContentGenerations AiContentGeneration[]
  aiImageGenerations   AiImageGeneration[]
  messages             Message[]
  notifications        Notification[]
  ContentTemplate      ContentTemplate[]
  MessageTemplate      MessageTemplate[]
  Post                 Post[]
  approvalsRequested   PostApproval[]        @relation("ApprovalRequester")
  approvalsGiven       PostApproval[]        @relation("ApprovalApprover")
  auditLogs            AuditLog[]
  aiUsages             AIUsage[]
}

model SocialAccount {
  id                String    @id @default(cuid())
  organizationId    String
  platform          Platform
  platformAccountId String // Platform-specific account ID
  username          String?
  name              String?
  displayName       String?
  profileImage      String?
  accessToken       String
  refreshToken      String?
  accessSecret      String? // For Twitter OAuth 1.0a
  tokenExpiresAt    DateTime?
  isActive          Boolean   @default(true)
  lastSyncAt        DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  scopes       String[]
  lastPostedAt DateTime?

  organization     Organization           @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  posts            Post[]
  rateLimitLogs    PlatformRateLimitLog[]
  EngagementMetric EngagementMetric[]

  @@unique([organizationId, platform, platformAccountId])
  @@index([platform, isActive])
  @@index([organizationId])
}

model Post {
  id              String     @id @default(cuid())
  authorId        String
  socialAccountId String
  content         String
  mediaUrls       String[]
  scheduledAt     DateTime?
  publishedAt     DateTime?
  requesterId     String
  approverId      String?
  status          PostStatus @default(DRAFT)
  platformPostId  String?
  errorMessage    String?
  retryCount      Int        @default(0)
  metadata        Json?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  author        User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  socialAccount SocialAccount   @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)
  approvals     PostApproval[]
  analytics     PostAnalytics[]
  scheduleJob   ScheduleJob?

  jobId       String // Bull job ID
  queueStatus ScheduleJobStatus @default(PENDING)

  // Relations to AI generations (optional)
  aiContent          AiContentGeneration?
  aiImageGenerations AiImageGeneration[]

  metrics EngagementMetric[]
  notifications Notification[]

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([socialAccountId, status, scheduledAt])
  @@index([status, scheduledAt])
}

model ScheduleJob {
  id     String @id @default(cuid())
  postId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model MediaFile {
  id                  String   @id @default(cuid())
  userId              String
  organizationId      String
  filename            String
  originalName        String
  mimeType            String
  size                Int
  url                 String
  publicId            String
  thumbnailUrl        String?
  duration            Int?
  metadata            Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  isAIGenerated       Boolean  @default(false)
  aiGenerationContext String?
  // Not unique to allow multiple files per generation:
  aiGenerationId      String?

  // Relation field (many media files -> one generation)
  aiImageGeneration AiImageGeneration? @relation(fields: [aiGenerationId], references: [id], onDelete: SetNull)

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([isAIGenerated])
  @@index([organizationId, isAIGenerated])
}

model Organization {
  id                 String                   @id @default(cuid())
  name               String
  slug               String                   @unique
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  isActive           Boolean                  @default(true)
  planTier           PlanTier                 @default(FREE)
  planStatus         PlanStatus               @default(ACTIVE)
  subscriptionEndsAt DateTime?
  totalCreditsUsed   Int                      @default(0)
  members            OrganizationMember[]
  invitations        OrganizationInvitation[]
  socialAccounts     SocialAccount[]
  mediaFiles         MediaFile[]

  aiContentGenerations AiContentGeneration[]
  aiImageGenerations   AiImageGeneration[]
  conversations        Conversation[]
  notifications        Notification[]
  webhookEvents        WebhookEvent[]
  PostingSchedule      PostingSchedule[]
  ContentTemplate      ContentTemplate[]
  MessageTemplate      MessageTemplate[]
  auditLogs            AuditLog[]

  aiUsages AIUsage[]
  posts    Post[]

  brandKit         BrandKit?
  EngagementMetric EngagementMetric[]
}

model OrganizationMember {
  id             String           @id @default(cuid())
  organizationId String
  userId         String
  role           OrganizationRole @default(MEMBER)
  invitedBy      String?
  joinedAt       DateTime         @default(now())
  isActive       Boolean          @default(true) // Soft delete flag

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation("OrganizationMemberships", fields: [userId], references: [id], onDelete: Cascade)
  inviter      User?        @relation("OrganizationInviter", fields: [invitedBy], references: [id], onDelete: SetNull)

  @@unique([organizationId, userId])
  @@index([userId, isActive])
}

model OrganizationInvitation {
  id             String           @id @default(cuid())
  email          String
  organizationId String
  invitedBy      String?
  role           OrganizationRole @default(MEMBER)
  status         InvitationStatus @default(PENDING)
  token          String           @unique
  expiresAt      DateTime
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  inviter      User?        @relation("SentInvitations", fields: [invitedBy], references: [id], onDelete: SetNull)

  @@unique([email, organizationId])
  @@index([token])
  @@index([email, status])
}

model AiContentGeneration {
  id             String      @id @default(cuid())
  organizationId String
  userId         String
  platform       Platform
  contentType    ContentType
  topic          String
  tone           ToneType
  creditsUsed    Int

  prompt        String   @db.Text
  generatedText String   @db.Text
  hashtags      String[]

  cost      Float    @default(0)
  provider  String
  model     String
  createdAt DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  post   Post?   @relation(fields: [postId], references: [id])
  postId String? @unique

  brandKitId String?
  brandKit   BrandKit? @relation(fields: [brandKitId], references: [id], onDelete: SetNull)

  @@index([organizationId, createdAt])
  @@index([userId])
}

model AiImageGeneration {
  id             String   @id @default(cuid())
  organizationId String
  userId         String
  prompt         String   @db.Text
  creditsUsed    Int
  imageUrl       String?
  revisedPrompt  String?  @db.Text
  cost           Float    @default(0)
  provider       String
  model          String
  createdAt      DateTime @default(now())

  // RELATIONS
  // Allow 0..N media files produced for this generation (safer than forcing 1:1)
  mediaFiles MediaFile[]

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  post   Post?   @relation(fields: [postId], references: [id])
  postId String? // remove @unique unless you want one generation per post

  brandKitId String?
  brandKit   BrandKit? @relation(fields: [brandKitId], references: [id], onDelete: SetNull)

  @@index([organizationId, createdAt])
}

model AIUsage {
  id             String   @id @default(cuid())
  organizationId String
  userId         String
  type           String // 'content_generation' | 'image_generation'
  tokensUsed     Int
  cost           Float
  metadata       Json?
  createdAt      DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([organizationId, createdAt])
}

// Conversation = a thread of messages with a user on a platform
model Conversation {
  id                 String            @id @default(cuid())
  organizationId     String
  platform           MessagingPlatform
  externalId         String // ID from platform (e.g., IG DM thread ID, FB convo ID)
  subject            String? // Optional: for LinkedIn/X future expansion
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  lastMessageAt      DateTime?
  lastMessagePreview String?
  unreadCount        Int               @default(0)
  externalUserId     String // ID of the user on the platform
  externalUsername   String? // Username of the user on the platform
  tags               String[] // e.g., ["vip", "support"]
  // Relations
  organization       Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  messages           Message[]

  @@unique([organizationId, platform, externalId])
}

model Message {
  id             String        @id @default(cuid())
  conversationId String
  senderId       String? // null if external user
  externalSender String? // username/id from platform
  content        String?
  mediaUrl       String? // optional image/video
  status         MessageStatus @default(UNREAD)
  sentAt         DateTime
  createdAt      DateTime      @default(now())

  // Relations
  conversation  Conversation   @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender        User?          @relation(fields: [senderId], references: [id], onDelete: SetNull)
  notifications Notification[]
}

model MessageTemplate {
  id             String   @id @default(cuid())
  organizationId String
  name           String
  content        String   @db.Text
  isActive       Boolean  @default(true)
  usageCount     Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  User         User?        @relation(fields: [userId], references: [id])
  userId       String?

  @@index([organizationId, isActive])
}

model ContentTemplate {
  id             String           @id @default(cuid())
  organizationId String? // Null for system templates
  userId         String // Creator
  name           String
  description    String?
  category       TemplateCategory
  platform       String
  content        Json // TemplateContent structure
  tags           String[]
  isPublic       Boolean          @default(false)
  status         TemplateStatus   @default(DRAFT)
  usageCount     Int              @default(0)
  lastUsedAt     DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Relations
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  brandKitId String?
  brandKit   BrandKit? @relation(fields: [brandKitId], references: [id], onDelete: SetNull)

  @@index([organizationId, platform])
  @@index([isPublic, platform, category])
  @@index([userId, status])
  @@index([tags]) // For tag-based searching
}

model PlatformRateLimitLog {
  id              String   @id @default(cuid())
  platform        Platform
  socialAccountId String
  requestType     String // e.g. "post", "dm", "comment"
  consumedAt      DateTime @default(now())
  windowStart     DateTime
  windowEnd       DateTime
  status          String // "allowed" | "blocked"

  socialAccount SocialAccount @relation(fields: [socialAccountId], references: [id])

  @@index([platform, socialAccountId, windowStart, windowEnd])
}

// ========================
// ANALYTICS & REPORTING
// ========================

model PostAnalytics {
  id          String   @id @default(cuid())
  postId      String
  platform    Platform
  likes       Int      @default(0)
  shares      Int      @default(0)
  comments    Int      @default(0)
  impressions Int      @default(0)
  clicks      Int      @default(0)
  reach       Int      @default(0)
  saves       Int      @default(0) // Instagram/LinkedIn saves
  videoViews  Int      @default(0)
  syncedAt    DateTime @default(now())
  createdAt   DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, platform, createdAt])
  @@index([postId, createdAt])
}

// ========================
// WEBHOOK & INTEGRATION
// ========================

model WebhookEvent {
  id                String             @id @default(cuid())
  organizationId    String
  platform          Platform
  eventType         WebhookEventType
  externalId        String? // Platform’s event ID
  platformAccountId String?
  payload           Json
  processed         Boolean            @default(false)
  processedAt       DateTime?
  errorMessage      String?
  retryCount        Int                @default(0)
  createdAt         DateTime           @default(now())
  deadLetter        DeadLetterWebhook?

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([platform, externalId])
  @@index([organizationId, processed, createdAt])
  @@index([platform, eventType, processed])
  @@index([platformAccountId])
}

model DeadLetterWebhook {
  id             String   @id @default(cuid())
  webhookEventId String   @unique
  reason         String
  payload        Json
  createdAt      DateTime @default(now())

  webhookEvent WebhookEvent @relation(fields: [webhookEventId], references: [id], onDelete: Cascade)
}

model EngagementMetric {
  id               String    @id @default(cuid())
  post             Post?     @relation(fields: [postId], references: [id])
  postId           String // The platform's post ID (e.g., Instagram post ID)
  platform         Platform
  type             String // 'like', 'comment', 'share', 'message'
  count            Int       @default(0)
  lastEngagementAt DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  socialAccountId String
  socialAccount   SocialAccount @relation(fields: [socialAccountId], references: [id])
  organizationId  String
  organization    Organization  @relation(fields: [organizationId], references: [id])

  @@unique([postId, platform, type])
  @@index([platform])
  @@index([type])
}

model PostingSchedule {
  id             String         @id @default(cuid())
  organizationId String
  platform       Platform
  timezone       String         @default("UTC")
  optimalTimes   Json // Array of {day: string, hours: number[]}
  isActive       Boolean        @default(true)
  lastUpdated    DateTime       @default(now())
  source         ScheduleSource @default(AI_RECOMMENDATION)

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, platform])
}

model PostApproval {
  id          String         @id @default(cuid())
  postId      String         @unique
  requesterId String
  approverId  String?
  status      ApprovalStatus @default(PENDING)
  comments    String?
  requestedAt DateTime       @default(now())
  reviewedAt  DateTime?

  post      Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  requester User  @relation("ApprovalRequester", fields: [requesterId], references: [id])
  approver  User? @relation("ApprovalApprover", fields: [approverId], references: [id])

  @@index([postId, status])
}

model Notification {
  id             String           @id @default(cuid())
  userId         String
  organizationId String
  type           NotificationType
  title          String
  content        String
  data           Json?            // Flexible data storage
  priority       NotificationPriority @default(NORMAL)
  read           Boolean          @default(false)
  expiresAt      DateTime?        // Auto-cleanup of old notifications
  createdAt      DateTime         @default(now())

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  message      Message?     @relation(fields: [messageId], references: [id], onDelete: SetNull)
  post         Post?        @relation(fields: [postId], references: [id], onDelete: SetNull)
  
  // Optional references
  messageId    String?
  postId       String?

  @@index([userId, read])
  @@index([createdAt])
  @@index([expiresAt])
}

enum NotificationType {
  MESSAGE_RECEIVED
  MENTION
  POST_APPROVAL
  SCHEDULE_REMINDER
  PERFORMANCE_ALERT
  SYSTEM_ALERT
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model AuditLog {
  id             String      @id @default(cuid())
  // Who did it?
  userId         String // The actor's User ID
  userEmail      String // Denormalized for instant readability in logs
  organizationId String // The scope of the action
  // What did they do?
  action         AuditAction // e.g., CREATE, UPDATE, DELETE, LOGIN, INVITE
  // What did they do it to?
  entityType     String // The Prisma model name, e.g., "Post", "User", "SocialAccount"
  entityId       String // The ID of the affected record
  // What changed?
  oldData        Json? // The previous state of the record (for UPDATE)
  newData        Json? // The new state of the record (for CREATE/UPDATE)
  // Context
  ipAddress      String?
  userAgent      String?
  createdAt      DateTime    @default(now())

  // Relations (optional, but useful for cascading deletes or queries)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Indexes for performant filtering
  @@index([organizationId, createdAt])
  @@index([entityType, entityId])
  @@index([userId, createdAt])
  @@index([action, createdAt])
}

// model AuditLog {
//   id             String   @id @default(cuid())
//   organizationId String? // Optional for system-wide actions
//   userId         String
//   userEmail      String
//   userRole       String
//   action         String // CREATE, UPDATE, DELETE, etc.
//   resource       String // USER, POST, ORGANIZATION, etc.
//   resourceId     String? // ID of the affected resource
//   description    String
//   ipAddress      String
//   userAgent      String
//   metadata       Json? // Additional context data
//   status         String // SUCCESS or FAILED
//   error          String?
//   createdAt      DateTime @default(now())

//   // Relations
//   organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
//   user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@index([organizationId, createdAt])
//   @@index([userId, createdAt])
//   @@index([action, createdAt])
//   @@index([resource, createdAt])
//   @@index([status, createdAt])
//   @@index([createdAt])
// }

model BrandKit {
  id             String  @id @default(cuid())
  organizationId String  @unique // One brand kit per organization
  name           String
  description    String?

  // Visual Identity
  logoUrl    String?
  faviconUrl String?

  // Colors
  colors BrandColor[]

  // Typography
  fonts BrandFont[]

  // Voice & Messaging
  brandVoice  BrandVoice?
  brandWords  String[] // Preferred terminology
  bannedWords String[] // Words to avoid

  // Social Media
  socialHandles Json? // { twitter: "@handle", instagram: "@handle" }
  websiteUrl    String?

  // Status
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organization         Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  templates            ContentTemplate[]
  aiContentGenerations AiContentGeneration[]
  aiImageGenerations   AiImageGeneration[]
}

model BrandColor {
  id         String         @id @default(cuid())
  brandKitId String
  name       String
  value      String // Hex code: #1E40AF
  type       BrandColorType
  order      Int            @default(0) // For sorting

  brandKit BrandKit @relation(fields: [brandKitId], references: [id], onDelete: Cascade)

  @@unique([brandKitId, name])
  @@unique([brandKitId, value])
}

model BrandFont {
  id         String       @id @default(cuid())
  brandKitId String
  name       String // Font name: "Inter"
  category   FontCategory
  weight     String? // "400", "700", etc.
  isCustom   Boolean      @default(false)
  customUrl  String? // For custom font files

  brandKit BrandKit @relation(fields: [brandKitId], references: [id], onDelete: Cascade)

  @@unique([brandKitId, category])
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  INVITE
  LOGIN
  EXECUTE
}

enum MessageStatus {
  UNREAD
  READ
  DELIVERED
  FAILED
}

enum OrganizationRole {
  OWNER
  ADMIN
  MANAGER
  MEMBER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum Platform {
  X
  LINKEDIN
  FACEBOOK
  INSTAGRAM
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
  CANCELLED
}

enum ScheduleJobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum UserRole {
  OWNER
  EDITOR
  ANALYST
  VIEWER
  USER
}

enum AuthProvider {
  LOCAL
  GOOGLE
}

enum PlanTier {
  FREE
  PRO
  BUSINESS
}

enum PlanStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  PAST_DUE
}

enum ContentType {
  POST
  STORY
  REEL
  CAROUSEL
  THREAD
}

enum ToneType {
  PROFESSIONAL
  CASUAL
  WITTY
  EXCITED
  INSPIRATIONAL
  EDUCATIONAL
}

enum AspectRatio {
  SQUARE    @map("1:1")
  LANDSCAPE @map("16:9")
  PORTRAIT  @map("4:5")
  VERTICAL  @map("9:16")
}

enum MessagingPlatform {
  INSTAGRAM
  FACEBOOK
  X
  LINKEDIN
}

enum ReportType {
  ENGAGEMENT
  PERFORMANCE
  AUDIENCE
  COMPETITOR
  CUSTOM
}

enum ReportFormat {
  JSON
  PDF
  EXCEL
  CSV
}

enum ReportStatus {
  GENERATING
  COMPLETED
  FAILED
}

enum WebhookEventType {
  POST_PUBLISHED
  POST_DELETED
  COMMENT_RECEIVED
  MESSAGE_RECEIVED
  MENTION_RECEIVED
  FOLLOWER_GAINED
  FOLLOWER_LOST
  ENGAGEMENT
}

enum ScheduleSource {
  AI_RECOMMENDATION
  MANUAL
  ANALYTICS_BASED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum TemplateCategory {
  ANNOUNCEMENT
  PROMOTIONAL
  EDUCATIONAL
  ENGAGEMENT
  EVENT
  PRODUCT
  SERVICE
  TESTIMONIAL
  UGC // User-Generated Content
  HOLIDAY
  SEASONAL
  TRENDING
}

enum TemplateStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum BrandColorType {
  PRIMARY
  SECONDARY
  ACCENT
  NEUTRAL
  SUCCESS
  WARNING
  ERROR
}

enum FontCategory {
  HEADING
  BODY
  ACCENT
}

enum BrandVoice {
  PROFESSIONAL
  CASUAL
  WITTY
  ENTHUSIASTIC
  AUTHORITATIVE
  FRIENDLY
  INSPIRATIONAL
}

enum EngagementType {
  LIKE
  COMMENT
  SHARE
  MENTION
  REACTION
}
