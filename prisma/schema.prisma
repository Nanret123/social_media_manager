generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String         @id @default(cuid())
  email                  String         @unique
  password               String? // Optional for OAuth users
  firstName              String?
  lastName               String?
  avatar                 String?
  role                   UserRole       @default(ANALYST)
  provider               AuthProvider   @default(LOCAL)
  googleId               String?        @unique
  isEmailVerified        Boolean        @default(false)
  emailVerificationToken String?
  resetPasswordToken     String?
  resetPasswordExpires   DateTime?
  refreshTokens          RefreshToken[]
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt

  mediaFiles    MediaFile[]
  posts         Post[]
  organizations OrganizationMember[] @relation("OrganizationMemberships")

  sentInvitations OrganizationInvitation[] @relation("SentInvitations")
  invitedMembers  OrganizationMember[]     @relation("OrganizationInviter")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model SocialAccount {
  id             String    @id @default(cuid())
  organizationId String
  platform       Platform
  accountId      String // Platform-specific account ID
  username       String?
  displayName    String?
  profileImage   String?
  accessToken    String
  refreshToken   String?
  accessSecret   String? // For Twitter OAuth 1.0a
  expiresAt      DateTime?
  isActive       Boolean   @default(true)
  lastSyncAt     DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  posts        Post[]

  @@unique([organizationId, platform, accountId])
}

model Post {
  id              String     @id @default(cuid())
  organizationId  String
  authorId        String
  socialAccountId String
  content         String
  mediaUrls       String[] // JSON array of media URLs
  scheduledAt     DateTime?
  publishedAt     DateTime?
  status          PostStatus @default(DRAFT)
  platformPostId  String? // ID returned from social platform
  errorMessage    String? // Error details if publishing fails
  retryCount      Int        @default(0)
  metadata        Json? // Platform-specific metadata
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  author        User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  organization  Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  socialAccount SocialAccount @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)

  media       PostMedia[]
  scheduleJob ScheduleJob?
}

model ScheduleJob {
  id        String            @id @default(cuid())
  postId    String            @unique
  jobId     String // Bull job ID
  status    ScheduleJobStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  post      Post              @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model MediaFile {
  id             String   @id @default(cuid())
  userId         String
  organizationId String
  filename       String
  originalName   String
  mimeType       String
  size           Int
  url            String // S3 or Cloudinary URL
  publicId       String
  thumbnailUrl   String? // For videos
  duration       Int? // For videos in seconds
  processed      Boolean  @default(false)
  metadata       Json? // Platform-specific processing info
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  postMedias   PostMedia[]
}

model PostMedia {
  id        String   @id @default(cuid())
  postId    String
  mediaId   String
  order     Int      @default(0)
  createdAt DateTime @default(now())

  post  Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  media MediaFile @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@unique([postId, mediaId])
}

model Organization {
  id                 String     @id @default(cuid())
  name               String
  slug               String     @unique
  ownerId            String
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  isActive           Boolean    @default(true)
  planTier           PlanTier   @default(FREE)
  planStatus         PlanStatus @default(ACTIVE)
  subscriptionEndsAt DateTime?

  members        OrganizationMember[]
  invitations    OrganizationInvitation[]
  socialAccounts SocialAccount[]
  posts          Post[]
  mediaFiles     MediaFile[]
}

model OrganizationMember {
  id             String           @id @default(cuid())
  organizationId String
  userId         String
  role           OrganizationRole @default(MEMBER)
  invitedBy      String?
  joinedAt       DateTime         @default(now())
  isActive       Boolean          @default(true) // Soft delete flag

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation("OrganizationMemberships", fields: [userId], references: [id], onDelete: Cascade)
  inviter      User?        @relation("OrganizationInviter", fields: [invitedBy], references: [id])

  @@unique([organizationId, userId])
}

model OrganizationInvitation {
  id             String           @id @default(cuid())
  email          String
  organizationId String
  invitedBy      String
  role           OrganizationRole @default(MEMBER)
  status         InvitationStatus @default(PENDING)
  token          String           @unique @default(cuid())
  expiresAt      DateTime
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  inviter      User         @relation("SentInvitations", fields: [invitedBy], references: [id])

  @@unique([email, organizationId])
}

enum OrganizationRole {
  OWNER
  ADMIN
  MANAGER
  MEMBER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum Platform {
  TWITTER
  LINKEDIN
  FACEBOOK
  INSTAGRAM
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
  CANCELLED
}

enum ScheduleJobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum UserRole {
  OWNER
  EDITOR
  ANALYST
  VIEWER
  USER
}

enum AuthProvider {
  LOCAL
  GOOGLE
}

enum PlanTier {
  FREE
  PRO
  BUSINESS
}

enum PlanStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  PAST_DUE
}
